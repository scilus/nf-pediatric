/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: 'NF_PEDIATRIC:PEDIATRIC:COREG' {
        ext.dimensionality = params.coreg_dimensionality
        ext.transform = params.coreg_transform
        ext.quick = params.coreg_quick
        ext.run_qc = true
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if (filename.contains("warped.nii.gz")) { (meta.age < 2.5 || meta.age > 18) ? "${meta.id}_${ses}space-T2w_desc-preproc_T1w.nii.gz" : "${meta.id}_${ses}space-T1w_desc-preproc_T2w.nii.gz" }
                else if (filename.contains("1GenericAffine.mat")) { (meta.age < 2.5 || meta.age > 18) ? "${meta.id}_${ses}from-T1w_to-T2w_affine.mat" : "${meta.id}_${ses}from-T2w_to-T1w_affine.mat" }
                else if (filename.contains("0InverseAffine.mat")) { (meta.age < 2.5 || meta.age > 18) ? "${meta.id}_${ses}from-T2w_to-T1w_affine.mat" : "${meta.id}_${ses}from-T1w_to-T2w_affine.mat" }
                else if (filename.contains("versions.yml")) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }
    withName: 'NF_PEDIATRIC:PEDIATRIC:ANATTODWI' {
        ext.run_qc = true
        ext.suffix_qc = "registration_anattodwi"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("T1w_warped") ) { "${meta.id}_${ses}space-DWI_desc-preproc_T1w.nii.gz" }
                else if ( filename.contains("T1w_output0GenericAffine.mat") ) { "${meta.id}_${ses}from-T1w_to-dwi_affine.mat" }
                else if ( filename.contains("T1w_output1Warp.nii.gz") ) { "${meta.id}_${ses}from-T1w_to-dwi_warp.nii.gz" }
                else if ( filename.contains("T1w_output1InverseWarp.nii.gz") ) { "${meta.id}_${ses}from-dwi_to-T1w_warp.nii.gz" }
                else if ( filename.contains("T2w_warped") ) { "${meta.id}_${ses}space-DWI_desc-preproc_T2w.nii.gz" }
                else if ( filename.contains("T2w_output0GenericAffine.mat") ) { "${meta.id}_${ses}from-T2w_to-dwi_affine.mat" }
                else if ( filename.contains("T2w_output1Warp.nii.gz") ) { "${meta.id}_${ses}from-T2w_to-dwi_warp.nii.gz" }
                else if ( filename.contains("T2w_output1InverseWarp.nii.gz") ) { "${meta.id}_${ses}from-dwi_to-T2w_warp.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }
    withName: 'NF_PEDIATRIC:PEDIATRIC:TEMPLATETODWI' {
        ext.run_qc = true
        ext.prefix = "template"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }
}
