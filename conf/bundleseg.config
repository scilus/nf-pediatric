/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'NF_PEDIATRIC:PEDIATRIC:BUNDLE_SEG:REGISTRATION_ANTS' {
        ext.dimensionality = 3
        ext.quick = false
        ext.transform = "a"
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:BUNDLE_SEG:BUNDLE_RECOGNIZE' {
        ext.minimal_vote_ratio = params.minimal_vote_ratio
        ext.outlier_alpha = params.outlier_alpha
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/bundles/" : "${params.outdir}/${meta.id}/dwi/bundles/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("AC_cleaned") ) { "${meta.id}_${ses}desc-AC.trk" }
                else if ( filename.contains("AF_L") ) { "${meta.id}_${ses}desc-AF_L.trk" }
                else if ( filename.contains("AF_R") ) { "${meta.id}_${ses}desc-AF_R.trk" }
                else if ( filename.contains("CC_Fr_1") ) { "${meta.id}_${ses}desc-CC_Fr_1.trk" }
                else if ( filename.contains("CC_Fr_2") ) { "${meta.id}_${ses}desc-CC_Fr_2.trk" }
                else if ( filename.contains("CC_Oc") ) { "${meta.id}_${ses}desc-CC_Oc.trk" }
                else if ( filename.contains("CC_Pa") ) { "${meta.id}_${ses}desc-CC_Pa.trk" }
                else if ( filename.contains("CC_Pr_Po") ) { "${meta.id}_${ses}desc-CC_Pr_Po.trk" }
                else if ( filename.contains("CC_Te") ) { "${meta.id}_${ses}desc-CC_Te.trk" }
                else if ( filename.contains("CG_L_An") ) { "${meta.id}_${ses}desc-CG_L_An.trk" }
                else if ( filename.contains("CG_L_curve") ) { "${meta.id}_${ses}desc-CG_L_curve.trk" }
                else if ( filename.contains("CG_L_Po") ) { "${meta.id}_${ses}desc-CG_L_Po.trk" }
                else if ( filename.contains("CG_L_cleaned") ) { "${meta.id}_${ses}desc-CG_L.trk" }
                else if ( filename.contains("CG_R_An") ) { "${meta.id}_${ses}desc-CG_R_An.trk" }
                else if ( filename.contains("CG_R_curve") ) { "${meta.id}_${ses}desc-CG_R_curve.trk" }
                else if ( filename.contains("CG_R_Po") ) { "${meta.id}_${ses}desc-CG_R_Po.trk" }
                else if ( filename.contains("CG_R_cleaned") ) { "${meta.id}_${ses}desc-CG_R.trk" }
                else if ( filename.contains("FAT_L") ) { "${meta.id}_${ses}desc-FAT_L.trk" }
                else if ( filename.contains("FAT_R") ) { "${meta.id}_${ses}desc-FAT_R.trk" }
                else if ( filename.contains("FPT_L_Brainstem") ) { "${meta.id}_${ses}desc-FPT_L_Brainstem.trk" }
                else if ( filename.contains("FPT_L_cleaned") ) { "${meta.id}_${ses}desc-FPT_L.trk" }
                else if ( filename.contains("FPT_R_Brainstem") ) { "${meta.id}_${ses}desc-FPT_R_Brainstem.trk" }
                else if ( filename.contains("FPT_L_cleaned") ) { "${meta.id}_${ses}desc-FPT_R.trk" }
                else if ( filename.contains("FX_L") ) { "${meta.id}_${ses}desc-FX_L.trk" }
                else if ( filename.contains("FX_R") ) { "${meta.id}_${ses}desc-FX_R.trk" }
                else if ( filename.contains("ICP_L") ) { "${meta.id}_${ses}desc-ICP_L.trk" }
                else if ( filename.contains("ICP_R") ) { "${meta.id}_${ses}desc-ICP_R.trk" }
                else if ( filename.contains("IFOF_L") ) { "${meta.id}_${ses}desc-IFOF_L.trk" }
                else if ( filename.contains("IFOF_R") ) { "${meta.id}_${ses}desc-IFOF_R.trk" }
                else if ( filename.contains("ILF_L") ) { "${meta.id}_${ses}desc-ILF_L.trk" }
                else if ( filename.contains("ILF_R") ) { "${meta.id}_${ses}desc-ILF_R.trk" }
                else if ( filename.contains("MCP") ) { "${meta.id}_${ses}desc-MCP.trk" }
                else if ( filename.contains("MdLF_L") ) { "${meta.id}_${ses}desc-MdLF_L.trk" }
                else if ( filename.contains("MdLF_R") ) { "${meta.id}_${ses}desc-MdLF_R.trk" }
                else if ( filename.contains("OR_ML_L") ) { "${meta.id}_${ses}desc-OR_ML_L.trk" }
                else if ( filename.contains("OR_ML_R") ) { "${meta.id}_${ses}desc-OR_ML_R.trk" }
                else if ( filename.contains("PC_cleaned") ) { "${meta.id}_${ses}desc-PC.trk" }
                else if ( filename.contains("POPT_L_Brainstem") ) { "${meta.id}_${ses}desc-POPT_L_Brainstem.trk" }
                else if ( filename.contains("POPT_R_Brainstem") ) { "${meta.id}_${ses}desc-POPT_R_Brainstem.trk" }
                else if ( filename.contains("POPT_L_cleaned") ) { "${meta.id}_${ses}desc-POPT_L.trk" }
                else if ( filename.contains("POPT_R_cleaned") ) { "${meta.id}_${ses}desc-POPT_R.trk" }
                else if ( filename.contains("PYT_L_Brainstem") ) { "${meta.id}_${ses}desc-PYT_L_Brainstem.trk" }
                else if ( filename.contains("PYT_R_Brainstem") ) { "${meta.id}_${ses}desc-PYT_R_Brainstem.trk" }
                else if ( filename.contains("PYT_L") ) { "${meta.id}_${ses}desc-PYT_L.trk" }
                else if ( filename.contains("PYT_R") ) { "${meta.id}_${ses}desc-PYT_R.trk" }
                else if ( filename.contains("SCP_L") ) { "${meta.id}_${ses}desc-SCP_L.trk" }
                else if ( filename.contains("SCP_R") ) { "${meta.id}_${ses}desc-SCP_R.trk" }
                else if ( filename.contains("SLF_L") ) { "${meta.id}_${ses}desc-SLF_L.trk" }
                else if ( filename.contains("SLF_R") ) { "${meta.id}_${ses}desc-SLF_R.trk" }
                else if ( filename.contains("UF_L") ) { "${meta.id}_${ses}desc-UF_L.trk" }
                else if ( filename.contains("UF_R") ) { "${meta.id}_${ses}desc-UF_R.trk" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }
}