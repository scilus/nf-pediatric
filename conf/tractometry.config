/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: "TRACTOGRAM_REMOVEINVALID" {
        publishDir = { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" }
        ext.force = true
        ext.cut_invalid = true
        ext.remove_single_point = true
        ext.remove_overlapping_points = true
        ext.threshold = 0.001
        ext.no_empty = true
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }
    withName: "BUNDLE_FIXELAFD" {
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }
    withName: "TRACTOGRAM_RESAMPLE" {
        ext.nb_points = params.nb_points
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }
    withName: "BUNDLE_CENTROID" {
        ext.nb_points = params.nb_points
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }
    withName: "BUNDLE_LABELMAP" {
        ext.nb_points = params.nb_points
        ext.colormap = params.colormap
        ext.new_labelling = true
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }
    withName: "BUNDLE_UNIFORMIZE" {
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }
    withName: "BUNDLE_STATS" {
        ext.density_weighting = params.density_weighting
        ext.normalize_weights = params.normalize_weights
        ext.length_stats = params.length_stats
        ext.endpoints = params.endpoints_stats
        ext.mean_std = params.means_std
        ext.volume = params.volume
        ext.volume_per_labels = params.volume_per_labels
        ext.mean_std_per_point = params.mean_std_per_point
        ext.lesions_stats = false
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
            mode: params.publish_dir_mode,
            saveAs: { 
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("length_stats") ) { "${meta.id}_${ses}desc-length_stats.json" }
                else if ( filename.contains("endpoints_map_raw") ) { "${meta.id}_${ses}desc-endpoints_map_raw_stats.json" }
                else if ( filename.contains("endpoints_metric_stats") ) { "${meta.id}_${ses}desc-endpoints_metric_stats.json" }
                else if ( filename.contains("mean_std.json") ) { "${meta.id}_${ses}desc-mean_std_stats.json" }
                else if ( filename.contains("volume.json") ) { "${meta.id}_${ses}desc-volume_stats.json" }
                else if ( filename.contains("volume_lesions") ) { "${meta.id}_${ses}desc-volume_lesions_stats.json" }
                else if ( filename.contains("streamline_count.json") ) { "${meta.id}_${ses}desc-streamline_count.json" }
                else if ( filename.contains("streamline_count_lesions") ) { "${meta.id}_${ses}desc-streamline_count_lesions.json" }
                else if ( filename.contains("volume_per_label.json") ) { "${meta.id}_${ses}desc-volume_per_label.json" }
                else if ( filename.contains("volume_per_label_lesions") ) { "${meta.id}_${ses}desc-volume_per_label_lesions.json" }
                else if ( filename.contains("mean_std_per_point") ) { "${meta.id}_${ses}desc-mean_std_per_point.json" }
                else if ( filename.contains("lesions_stats.json") ) { "${meta.id}_${ses}desc-lesions_stats.json" }
                else if ( filename.contains("endpoints_map_head") ) { "${meta.id}_${ses}desc-endpoints_map_head.nii.gz" }
                else if ( filename.contains("endpoints_map_tail") ) { "${meta.id}_${ses}desc-endpoints_map_tail.nii.gz" }
                else if ( filename.contains("lesion_map") ) { "${meta.id}_${ses}desc-lesions_map.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }
}
