/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    //** SEGMENTATION **//
    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:FASTSURFER' {
        ext.acq3T = params.acq3T
        ext.cerebnet = params.cerebnet
        ext.hypvinn = params.hypvinn
        publishDir = [
            [
                path: { params.fs_output_dir ?: "${params.outdir}/../fastsurfer-v2.3.3/" },
                mode: params.publish_dir_mode,
                saveAs: {
                    filename ->
                    def ses = meta.session ? "_${meta.session}" : ""
                    if ( filename.contains("fastsurfer") ) { "${meta.id}${ses}" }
                    else if ( filename.contains("versions.yml") ) { null }
                    else { params.lean_output ? null : filename }
                }
            ],
            [
                path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
                mode: params.publish_dir_mode,
                saveAs: {
                    filename ->
                    def ses = meta.session ? "${meta.session}_" : ""
                    if ( filename.contains("__final_t1.nii.gz") ) { "${meta.id}_${ses}desc-preproc_T1w.nii.gz" }
                    else if ( filename.contains("versions.yml") ) { null }
                    else { params.lean_output ? null : filename }
                }
            ]
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:RECONALL' {
        publishDir = [
        [
            path: { params.fs_output_dir ?: "${params.outdir}/../freesurfer-7.4.1/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "_${meta.session}" : ""
                if ( filename.contains("recon_all") ) { "${meta.id}${ses}" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ],
        [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("__final_t1.nii.gz") ) { "${meta.id}_${ses}desc-preproc_T1w.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T1W:DENOISING_NLMEANS' {
        ext.number_of_coils = params.t1_denoise_number_of_coils
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T1W:PREPROC_N4' {
        ext.bspline_knot_per_voxel = params.t1_bias_bspline_knot_per_voxel
        ext.shrink_factor = params.t1_bias_shrink_factor
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T1W:IMAGE_RESAMPLE' {
        ext.voxel_size = params.t1_resample_voxel_size
        ext.interp = params.t1_resample_interp
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T1W:BETCROP_SYNTHBET' {
        ext.border = params.t1_synthstrip_border
        ext.nocsf = params.t1_synthstrip_nocsf
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T1W:CROPVOLUME' {
        ext.output_bbox = true
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_cropped.nii.gz") ) { "${meta.id}_${ses}desc-preproc_T1w.nii.gz" }
                else if ( filename.contains(".pkl") ) { "${meta.id}_${ses}desc-boundingbox.pkl" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T1W:CROPVOLUME_MASK' {
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_cropped.nii.gz") ) { "${meta.id}_${ses}desc-brain_mask.nii.gz" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T2W:DENOISING_NLMEANS' {
        ext.number_of_coils = params.t2_denoise_number_of_coils
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T2W:PREPROC_N4' {
        ext.bspline_knot_per_voxel = params.t2_bias_bspline_knot_per_voxel
        ext.shrink_factor = params.t2_bias_shrink_factor
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T2W:IMAGE_RESAMPLE' {
        ext.voxel_size = params.t2_resample_voxel_size
        ext.interp = params.t2_resample_interp
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T2W:BETCROP_SYNTHBET' {
        ext.border = params.t2_synthstrip_border
        ext.nocsf = params.t2_synthstrip_nocsf
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T2W:CROPVOLUME' {
        ext.output_bbox = true
        ext.first_suffix = 't2'
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_cropped.nii.gz") ) { "${meta.id}_${ses}desc-preproc_T2w.nii.gz" }
                else if ( filename.contains(".pkl") ) { "${meta.id}_${ses}desc-boundingbox.pkl" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:PREPROC_T2W:CROPVOLUME_MASK' {
        ext.first_suffix = 'brain_mask'
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("_cropped.nii.gz") ) { "${meta.id}_${ses}desc-brain_mask.nii.gz" }
                else if ( filename.contains(".pkl") ) { "${meta.id}_${ses}desc-boundingbox.pkl" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:COREG' {
        ext.dimensionality = params.coreg_dimensionality
        ext.transform = params.coreg_transform
        ext.quick = params.coreg_quick
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if (filename.contains("warped.nii.gz")) { "${meta.id}_${ses}space-T2w_desc-preproc_T1w.nii.gz" }
                else if (filename.contains("1GenericAffine.mat")) { "${meta.id}_${ses}from-T1w_to-T2w_affine.mat" }
                else if (filename.contains("0InverseAffine.mat")) { "${meta.id}_${ses}from-T2w_to-T1w_affine.mat"  }
                else if (filename.contains("versions.yml")) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:MCRIBS' {
        ext.surf = true
        ext.jointhresh = params.mcribs_jointhresh
        ext.fastcollision = params.mcribs_fastcollision
        ext.nopialoutside = params.mcribs_nopialoutside
        ext.cortical = true
        ext.aparcaseg = true
        ext.stats = true
        ext.seed = params.mcribs_seed
        publishDir = [
            path: { params.fs_output_dir ?: "${params.outdir}/../mcribs-2.1.0/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                if ( filename.contains("mcribs") ) { "${meta.id}${meta.session ? '_${meta.session}' : ''}" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:BRAINNETOMECHILD' {
        publishDir = [
            [
                path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
                mode: params.publish_dir_mode,
                saveAs: {
                    filename ->
                    def ses = meta.session ? "${meta.session}_" : ""
                    if ( filename.contains("child_v1.nii.gz") ) { "${meta.id}_${ses}seg-BrainnetomeChild_dseg.nii.gz" }
                    else if ( filename.contains("child_v1_dilated.nii.gz") ) {"${meta.id}_${ses}seg-BrainnetomeChild_dseg_dilated.nii.gz"}
                    else if ( filename.contains("subcortical.tsv") ) {"${meta.id}_${ses}seg-BrainnetomeChild_stat-subcortical.tsv"}
                    else if ( filename.contains("volume_lh") ) {"${meta.id}_${ses}seg-BrainnetomeChild_stat-lh_volume.tsv"}
                    else if ( filename.contains("volume_rh") ) {"${meta.id}_${ses}seg-BrainnetomeChild_stat-rh_volume.tsv"}
                    else if ( filename.contains("thickness_lh") ) {"${meta.id}_${ses}seg-BrainnetomeChild_stat-lh_thickness.tsv"}
                    else if ( filename.contains("thickness_rh") ) {"${meta.id}_${ses}seg-BrainnetomeChild_stat-rh_thickness.tsv"}
                    else if ( filename.contains("area_lh") ) {"${meta.id}_${ses}seg-BrainnetomeChild_stat-lh_area.tsv"}
                    else if ( filename.contains("area_rh") ) {"${meta.id}_${ses}seg-BrainnetomeChild_stat-rh_area.tsv"}
                    else if ( filename.contains("brainnetome_child_v1.txt") ) {"${meta.id}_${ses}seg-BrainnetomeChild_desc-labels.txt"}
                    else if ( filename.contains("brainnetome_child_v1.json") ) {"${meta.id}_${ses}seg-BrainnetomeChild_desc-labels.json"}
                    else if ( filename.contains("versions.yml") ) { null }
                    else { params.lean_output ? null : filename }
                }
            ],
            [
                path: {
                    def ses = meta.session ? "_${meta.session}" : ""
                    params.fs_output_dir ? "${params.fs_output_dir}/${meta.id}${ses}/${meta.id}/label/" : params.use_fastsurfer ? "${params.outdir}/../fastsurfer-v2.3.3/${meta.id}${ses}/${meta.id}/label/" : "${params.outdir}/../freesurfer-7.4.1/${meta.id}${ses}/${meta.id}/label/" },
                mode: params.publish_dir_mode,
                pattern: "*BN_Child.annot",
            ],
            [
                path: {
                    def ses = meta.session ? "_${meta.session}" : ""
                    params.fs_output_dir ? "${params.fs_output_dir}/${meta.id}${ses}/${meta.id}/stats/" : params.use_fastsurfer ? "${params.outdir}/../fastsurfer-v2.3.3/${meta.id}${ses}/${meta.id}/stats/" : "${params.outdir}/../freesurfer-7.4.1/${meta.id}${ses}/${meta.id}/stats/" },
                mode: params.publish_dir_mode,
                pattern: "*BN_Child.stats"
            ]
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:FORMATLABELS' {
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("labels.nii.gz") ) { "${meta.id}_${ses}seg-DK_dseg.nii.gz" }
                else if ( filename.contains("volume_aseg_subcortical.tsv") ) { "${meta.id}_${ses}seg-DK_stat-subcortical.tsv" }
                else if ( filename.contains("volume_lh") ) { "${meta.id}_${ses}seg-DK_stat-lh_volume.tsv" }
                else if ( filename.contains("volume_rh") ) { "${meta.id}_${ses}seg-DK_stat-rh_volume.tsv" }
                else if ( filename.contains("area_lh") ) { "${meta.id}_${ses}seg-DK_stat-lh_area.tsv" }
                else if ( filename.contains("area_rh") ) { "${meta.id}_${ses}seg-DK_stat-rh_area.tsv" }
                else if ( filename.contains("thickness_lh") ) { "${meta.id}_${ses}seg-DK_stat-lh_thickness.tsv" }
                else if ( filename.contains("thickness_rh") ) { "${meta.id}_${ses}seg-DK_stat-rh_thickness.tsv" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }

    withName: 'NF_PEDIATRIC:PEDIATRIC:SEGMENTATION:CONCATENATESTATS' {
        publishDir = [
            path: { "${params.outdir}/"},
            mode: params.publish_dir_mode,
            saveAs: {
                filename -> filename.equals('versions.yml') ? null : filename
            }
        ]
    }
}
