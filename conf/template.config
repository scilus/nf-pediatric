/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    withName: 'NF_PEDIATRIC:PEDIATRIC:OUTPUT_TEMPLATE_SPACE:UTILS_TEMPLATEFLOW' {
        publishDir = [
            path: "${params.templateflow_home}/",
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                if ( filename.endsWith("${params.template}") ) { "tpl-${params.template}" }
                else if ( filename.contains("${params.template}_metadata") ) { "tpl-${params.template}_metadata.json" }
                else if ( filename.contains("${params.template}_citations") ) { "tpl-${params.template}_citations.bib" }
                else if ( filename.equals("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }
    withName: 'NF_PEDIATRIC:PEDIATRIC:OUTPUT_TEMPLATE_SPACE:BET_T1W' {
        ext.bet_f = 0.6
        ext.crop = false
        ext.dilate = false
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }
    withName: 'NF_PEDIATRIC:PEDIATRIC:OUTPUT_TEMPLATE_SPACE:BET_T2W' {
        ext.bet_f = 0.6
        ext.crop = false
        ext.dilate = false
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.lean_output ? false : true
        ]
    }
    withName: 'NF_PEDIATRIC:PEDIATRIC:OUTPUT_TEMPLATE_SPACE:REGISTRATION_ANTS' {
        ext.transform = 's'
        ext.quick = false
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                def mod = params.infant ? "T2w" : "T1w"
                if ( filename.contains("_warped.nii.gz") ) { "${meta.id}_${ses}space-${params.template}_desc-preproc_${mod}.nii.gz" }
                else if ( filename.contains("0Warp.nii.gz") ) { "${meta.id}_${ses}from-dwi_to-${params.template}_warp.nii.gz" }
                else if ( filename.contains("1GenericAffine.mat") ) { "${meta.id}_${ses}from-dwi_to-${params.template}_affine.mat" }
                else if ( filename.contains("1InverseWarp.nii.gz") ) { "${meta.id}_${ses}from-${params.template}_to-dwi_warp.nii.gz" }
                else if ( filename.contains("0InverseAffine.mat") ) { "${meta.id}_${ses}from-${params.template}_to-dwi_affine.mat" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }
    withName: 'NF_PEDIATRIC:PEDIATRIC:OUTPUT_TEMPLATE_SPACE:REGISTRATION_ANTSAPPLYTRANSFORMS' {
        ext.interpolation = 'linear'
        ext.dimensionality = 3
        ext.image_type = 0
        ext.output_dtype = "float"
        ext.default_val = 0
        publishDir = [
            [
                path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/anat/" : "${params.outdir}/${meta.id}/anat/" },
                mode: params.publish_dir_mode,
                saveAs: {
                    filename ->
                    def ses = meta.session ? "${meta.session}_" : ""
                    if ( filename.contains("labels") ) {params.infant ? "${meta.id}_${ses}space-${params.template}_seg-DK_dseg.nii.gz" : "${meta.id}_${ses}space-${params.template}_seg-BrainnetomeChild_dseg.nii.gz" }
                    else if ( filename.contains("versions.yml") ) { null }
                    else { params.lean_output ? null : filename }
                }
            ],
            [
                path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
                mode: params.publish_dir_mode,
                saveAs: {
                    filename ->
                    def ses = meta.session ? "${meta.session}_" : ""
                    if ( filename.contains("ad") ) { "${meta.id}_${ses}space-${params.template}_desc-ad.nii.gz" }
                    else if ( filename.contains("fa") ) { "${meta.id}_${ses}space-${params.template}_desc-fa.nii.gz" }
                    else if ( filename.contains("rd") ) { "${meta.id}_${ses}space-${params.template}_desc-rd.nii.gz" }
                    else if ( filename.contains("md") ) { "${meta.id}_${ses}space-${params.template}_desc-md.nii.gz" }
                    else if ( filename.contains("mode") ) { "${meta.id}_${ses}space-${params.template}_desc-mode.nii.gz" }
                    else if ( filename.contains("tensor") ) { "${meta.id}_${ses}space-${params.template}_desc-tensor.nii.gz" }
                    else if ( filename.contains("rgb") ) { "${meta.id}_${ses}space-${params.template}_desc-rgb.nii.gz" }
                    else if ( filename.contains("ga") ) { "${meta.id}_${ses}space-${params.template}_desc-ga.nii.gz" }
                    else if ( filename.contains("afd_total") ) { "${meta.id}_${ses}space-${params.template}_desc-afd_total.nii.gz" }
                    else if ( filename.contains("nufo") ) { "${meta.id}_${ses}space-${params.template}_desc-nufo.nii.gz" }
                    else if ( filename.contains("afd_max") ) { "${meta.id}_${ses}space-${params.template}_desc-afd_max.nii.gz" }
                    else if ( filename.contains("afd_sum") ) { "${meta.id}_${ses}space-${params.template}_desc-afd_sum.nii.gz" }
                    else if ( filename.contains("versions.yml") ) { null }
                    else { params.lean_output ? null : filename }
                }
            ]
        ]
    }
    withName: 'NF_PEDIATRIC:PEDIATRIC:OUTPUT_TEMPLATE_SPACE:REGISTRATION_TRACTOGRAM' {
        ext.inverse = true
        ext.force = true
        ext.cut_invalid = true
        ext.remove_single_point = true
        ext.remove_overlapping_points = true
        ext.threshold = 0.001
        ext.no_empty = true
        publishDir = [
            path: { meta.session ? "${params.outdir}/${meta.id}/${meta.session}/dwi/" : "${params.outdir}/${meta.id}/dwi/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                def ses = meta.session ? "${meta.session}_" : ""
                if ( filename.contains("pft_tracking") ) { "${meta.id}_${ses}space-${params.template}_desc-pft_tracking.trk" }
                else if ( filename.contains("local_tracking") ) { "${meta.id}_${ses}space-${params.template}_desc-local_tracking.trk" }
                else if ( filename.contains("commit") ) { params.infant ? "${meta.id}_${ses}space-${params.template}_seg-DK_desc-filtered_tractogram.h5" : "${meta.id}_${ses}space-${params.template}seg-BrainnetomeChild_desc-filtered_tractogram.h5" }
                else if ( filename.contains("afd_fixel.h5") ) { params.infant ? "${meta.id}_${ses}space-${params.template}_seg-DK_desc-preproc_tractogram.h5" : "${meta.id}_${ses}space-${params.template}seg-BrainnetomeChild_desc-preproc_tractogram.h5" }
                else if ( filename.contains("versions.yml") ) { null }
                else { params.lean_output ? null : filename }
            }
        ]
    }
}
