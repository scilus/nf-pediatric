nextflow_workflow {

    name "Test Subworkflow TOPUP_EDDY"
    script "../main.nf"
    workflow "TOPUP_EDDY"
    config "./nextflow.config"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/topup_eddy"

    tag "preproc"
    tag "preproc/topup"
    tag "preproc/eddy"
    tag "utils/extractb0"
    tag "betcrop/fslbetcrop"

    tag "load_test_data"

    setup {
        run("LOAD_TEST_DATA", alias: "LOAD_DATA") {
            script "../../load_test_data/main.nf"
            process {
                """
                input[0] = Channel.from( [ "topup_eddy_light.zip" ] )
                input[1] = "test.load-test-data"
                """
            }
        }
    }

    test("topup_eddy - ONLY Eddy - AP DWI | PA sbref") {

        when {
            workflow {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.nii.gz"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bval"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bvec")
                    ]}
                input[1] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_sbref.nii.gz")
                    ]}
                input[2] = Channel.from( [] )
                input[3] = Channel.from( [] )
                input[4] = Channel.from( [] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out
                        .findAll{ !it.key.isInteger() && it.value  }
                        .collect{ out -> ["b0_mask", "bval", "versions"].contains(out.key)
                        ? out.value
                        : file(out.value.get(0).get(1)).name }
                ).match() }
            )
        }
    }

    test("topup_eddy - AP DWI | PA sbref") {
        when {
            workflow {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.nii.gz"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bval"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bvec")
                    ]}
                input[1] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_sbref.nii.gz")
                    ]}
                input[2] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        [],
                        [],
                        []
                    ]}

                input[3] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-PA_sbref.nii.gz")
                    ]}
                input[4] = Channel.from( [] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out
                        .findAll{ !it.key.isInteger() && it.value  }
                        .collect{ out -> ["b0_mask", "bval", "versions"].contains(out.key)
                        ? out.value
                        : file(out.value.get(0).get(1)).name }
                ).match() }
            )
        }
    }

    test("topup_eddy - AP DWI+sbref | PA DWI+sbref") {

        when {
            workflow {
                """
                input[0] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.nii.gz"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bval"),
                        file("\${test_data_directory}/sub-01_dir-AP_dwi.bvec")
                    ]}
                input[1] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-AP_sbref.nii.gz")
                    ]}
                input[2] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-PA_dwi.nii.gz"),
                        file("\${test_data_directory}/sub-01_dir-PA_dwi.bval"),
                        file("\${test_data_directory}/sub-01_dir-PA_dwi.bvec")
                    ]}
                input[3] = LOAD_DATA.out.test_data_directory.map{
                    test_data_directory -> [
                        [ id:'test', single_end:false ],
                        file("\${test_data_directory}/sub-01_dir-PA_sbref.nii.gz")
                    ]}
                input[4] = Channel.from( [] )
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out
                        .findAll{ !it.key.isInteger() && it.value  }
                        .collect{ out -> ["b0_mask", "bval", "versions"].contains(out.key)
                        ? out.value
                        : file(out.value.get(0).get(1)).name }
                ).match() }
            )
        }
    }
}
